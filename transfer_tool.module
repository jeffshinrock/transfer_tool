<?php
	//Create session to store data for user session
	session_start();

include_once('transfer_tool.import.inc');
include_once('transfer_tool.class.inc');
include_once('transfer_tool.blocks.inc');
include_once('transfer_tool.forms.inc');

function transfer_tool_permission(){
 return array(
    'administer transfer tool' => array(
      'title' => t('Administer transfer tool settings'),
      'description' => t('Configure transfer tool settings.'),
    ),
  );
}
	
function transfer_tool_menu(){
  $items = array();
  
  $items['transferapp/courses'] = array(
    'title' => 'Mount Mercy Transfer Equivalencies',
    'page callback' => 'transfer_tool_page',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK, 
  );
  
  $items['admin/config/transfertool'] = array(
    'title' => 'Mount Mercy Transfer Tool Settings',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer transfer tool'),
    'page arguments' => array('transfer_tool_settings_form'),
    'file' => 'transfer_tool.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  
  $items['transferapp/add'] = array(
    'page callback' => 'transfer_tool_write_history',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  
  $items['transferapp/remove'] = array(
    'page callback' => 'transfer_tool_remove_history',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  
  $items['transferapp/get'] = array(
    'page callback' => 'transfer_tool_get_history',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  
  $items['test/1'] = array(
    'page callback' => 'transfer_tool_get_history',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  
  $items['transfer/refresh-elements'] = array(
    'page callback' => 'transfer_tool_refresh',
    'access arguments' => array(1),
    'theme callback' => 'ajax_base_page_theme',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
  
} 

function transfer_tool_init(){

  drupal_add_js(drupal_get_path('module','transfer_tool') . "/js/transfer_tool.js");
  drupal_add_js(array('transfer_tool' => array('path' => drupal_get_path('module','transfer_tool'))),'setting');
  drupal_add_css(drupal_get_path('module','transfer_tool') . "/css/transfer_tool.css");
  drupal_add_library('system', 'drupal.ajax');
}
	
function transfer_tool_error_message(){
  drupal_set_message("We're having some trouble with the transfer tool right now, please try again later. Our webmaster has been notified.",'error');
}

function transfer_tool_ajax_theme() {
   $themes = array(
      'history_box_theme' => array(
         'render element' => 'form',
      ),
   );
   return $themes;
}

function theme_history_box_theme($variables) {
   $form = $variables['form'];
   $output = '';
   if(!empty($form)) {
      $headers = array();
      $rows = array();
      foreach(element_children($form) as $num => $line_items) {
         $td = array();
         foreach(element_children($form[$num]) as $field) {
            $type = $form[$num][$field]['#type'];
            if($type == 'hidden') {
               $td[0]['data'] .= drupal_render($form[$num][$field]);
            } else {
               $headers[$field] = array('data' => $field, 'class' => array('history-header-'.$field));
               $td[] = array('data' => drupal_render($form[$num][$field]), 'class' => array('history-field-'.$field));
            }
         }
         $rows[] = $td;
      }
      $table = theme('table', array('header' => $headers, 'rows' => $rows));
      $output .=  $table;
   } 
   $output .= drupal_render_children($form);
   dd('yes');
   return $output;
}

function transfer_tool_get_orgs(){
	// Do search for Organizations to populate the Institution Dropdown box.
	$organizationSQL = "SELECT org_code_id, org_name FROM {transfer_tool_orgs} ORDER BY org_name";
	$organizationResult = db_query($organizationSQL);  
	
	$orgs = array();
	
	if ($organizationResult->rowCount() == 0)  { 
    watchdog('Transfer Tool','No Organizations Found');
    transfer_tool_error_message(); 
  } else {
    foreach($organizationResult as $org){
      $orgs[$org->org_code_id] = $org->org_name;
    }     
  }
  
  return $orgs;  
}

function transfer_tool_get_org_name($org){
  $result = db_query("SELECT org_name FROM {transfer_tool_orgs} WHERE org_code_id = :org_id",array(':org_id' => $org))->fetchObject();
	return $result->org_name; 
}
